/*
 * Intel ACPI Component Architecture
 * AML/ASL+ Disassembler version 20200214 (64-bit version)
 * Copyright (c) 2000 - 2020 Intel Corporation
 * 
 * Disassembling to symbolic ASL+ operators
 *
 * Disassembly of ssdt8.dat, Wed Mar 11 20:25:19 2020
 *
 * Original Table Header:
 *     Signature        "SSDT"
 *     Length           0x00002203 (8707)
 *     Revision         0x02
 *     Checksum         0x20
 *     OEM ID           "LENOVO"
 *     OEM Table ID     "ProjSsdt"
 *     OEM Revision     0x00000010 (16)
 *     Compiler ID      "INTL"
 *     Compiler Version 0x20160527 (538314023)
 */
DefinitionBlock ("", "SSDT", 2, "LENOVO", "ProjSsdt", 0x00000010)
{
    External (_SB_.GGIV, MethodObj)    // 1 Arguments
    External (_SB_.IETM, DeviceObj)
    External (_SB_.PCI0.LPCB.EC__.DOCD, UnknownObj)
    External (_SB_.PCI0.SAT0, DeviceObj)
    External (_SB_.PCI0.SAT0.PRT0, DeviceObj)
    External (_SB_.PCI0.SAT0.PRT1, DeviceObj)
    External (_SB_.PCI0.SAT0.PRT2, DeviceObj)
    External (_SB_.PCI0.SAT0.PRT3, DeviceObj)
    External (_SB_.PCI0.SAT0.PRT4, DeviceObj)
    External (_SB_.PCI0.SAT0.PRT5, DeviceObj)
    External (_SB_.PCI0.XHC_, DeviceObj)
    External (_SB_.PCI0.XHC_.MEMB, UnknownObj)
    External (_SB_.PCI0.XHC_.RHUB, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS01, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS02, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS03, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS04, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS05, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS06, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS07, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS08, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS09, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS10, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS01, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS02, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS03, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS04, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS05, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS06, DeviceObj)
    External (_SB_.UBTC.RUCC, MethodObj)    // 2 Arguments
    External (ADBG, MethodObj)    // 1 Arguments
    External (DPP0, UnknownObj)
    External (DPP1, UnknownObj)
    External (DPP2, UnknownObj)
    External (DPP3, UnknownObj)
    External (DPP4, UnknownObj)
    External (DVS0, UnknownObj)
    External (DVS1, UnknownObj)
    External (DVS2, UnknownObj)
    External (DVS3, UnknownObj)
    External (WIN8, UnknownObj)

    Scope (\)
    {
        Name (UPC0, Package (0x04)
        {
            0xFF, 
            0x09, 
            0x00, 
            0x00
        })
        Name (PLD0, Buffer (0x10)
        {
            /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x08, 0x00, 0x03, 0x00,  // ........
            /* 0008 */  0x51, 0x12, 0x80, 0x00, 0x03, 0x00, 0x00, 0x00   // Q.......
        })
        Name (UPC1, Package (0x04)
        {
            0xFF, 
            0x00, 
            0x00, 
            0x00
        })
        Name (PLD1, Buffer (0x10)
        {
            /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x59, 0x12, 0x10, 0x01, 0x03, 0x00, 0x00, 0x00   // Y.......
        })
        Name (UPC2, Package (0x04)
        {
            0xFF, 
            0x00, 
            0x00, 
            0x00
        })
        Name (PLD2, Buffer (0x10)
        {
            /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x51, 0x10, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00   // Q.......
        })
        Name (UPC3, Package (0x04)
        {
            0xFF, 
            0x09, 
            0x00, 
            0x00
        })
        Name (PLD3, Buffer (0x10)
        {
            /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x08, 0x00, 0x03, 0x00,  // ........
            /* 0008 */  0x51, 0x11, 0x80, 0x02, 0x03, 0x00, 0x00, 0x00   // Q.......
        })
        Name (UPCI, Package (0x04)
        {
            0x00, 
            0xFF, 
            0x00, 
            0x00
        })
        Name (PLDI, Buffer (0x10)
        {
            /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 0.......
        })
        Name (PLDC, Buffer (0x14)
        {
            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x24, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // $.......
            /* 0010 */  0xDD, 0x00, 0x95, 0x00                           // ....
        })
    }

    Scope (\_SB.PCI0.XHC.RHUB)
    {
        Name (H2CN, 0x01)
        Name (H2VS, 0x01)
        Name (H2TC, 0x01)
        Name (H2CR, 0x01)
        Name (S2CN, 0x01)
        Name (S2VS, 0x01)
        Name (S2CP, 0x02)
        Name (S2TC, 0x01)
        Name (S2CR, 0x01)
        Name (H5CN, 0x01)
        Name (H5VS, 0x01)
        Name (H5TC, 0x01)
        Name (H5CR, 0x02)
        Name (S5CN, 0x00)
        Name (S5VS, 0x00)
        Name (S5CP, 0x00)
        Name (S5TC, 0x00)
        Name (S5CR, 0x00)
        Method (GPLD, 2, Serialized)
        {
            Name (PCKG, Package (0x01)
            {
                Buffer (0x10){}
            })
            CreateField (DerefOf (PCKG [0x00]), 0x00, 0x07, REV)
            REV = 0x01
            CreateField (DerefOf (PCKG [0x00]), 0x40, 0x01, VISI)
            VISI = Arg0
            CreateField (DerefOf (PCKG [0x00]), 0x57, 0x08, GPOS)
            GPOS = Arg1
            Return (PCKG) /* \_SB_.PCI0.XHC_.RHUB.GPLD.PCKG */
        }

        Method (TPLD, 2, Serialized)
        {
            Name (PCKG, Package (0x01)
            {
                Buffer (0x10){}
            })
            CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
            REV = One
            CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
            VISI = Arg0
            CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
            GPOS = Arg1
            CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
            SHAP = One
            CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
            WID = 0x08
            CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
            HGT = 0x03
            Return (PCKG) /* \_SB_.PCI0.XHC_.RHUB.TPLD.PCKG */
        }

        Method (GUPC, 1, Serialized)
        {
            Name (PCKG, Package (0x04)
            {
                0x00, 
                0xFF, 
                0x00, 
                0x00
            })
            PCKG [0x00] = Arg0
            Return (PCKG) /* \_SB_.PCI0.XHC_.RHUB.GUPC.PCKG */
        }

        Method (TUPC, 1, Serialized)
        {
            Name (PCKG, Package (0x04)
            {
                0x01, 
                0x00, 
                0x00, 
                0x00
            })
            PCKG [0x01] = Arg0
            Return (PCKG) /* \_SB_.PCI0.XHC_.RHUB.TUPC.PCKG */
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS01)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            CopyObject (\UPCI, UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS01._UPC.UPCP */
            Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS01._UPC.UPCP */
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10){})
            PLDP = \PLDI
            Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS01._PLD.PLDP */
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS02)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            If ((H2TC == 0x00))
            {
                Return (GUPC (H2CN))
            }
            Else
            {
                Return (\_SB.UBTC.RUCC (H2CR, 0x01))
            }
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            If ((H2TC == 0x00))
            {
                Return (GPLD (H2VS, 0x01))
            }
            Else
            {
                Return (\_SB.UBTC.RUCC (H2CR, 0x02))
            }
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS03)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            CopyObject (\UPC1, UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS03._UPC.UPCP */
            Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS03._UPC.UPCP */
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10){})
            PLDP = \PLD1
            Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS03._PLD.PLDP */
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS04)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            CopyObject (\UPC2, UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS04._UPC.UPCP */
            Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS04._UPC.UPCP */
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10){})
            PLDP = \PLD2
            Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS04._PLD.PLDP */
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS05)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            If ((H5TC == 0x00))
            {
                Return (GUPC (H5CN))
            }
            Else
            {
                Return (\_SB.UBTC.RUCC (H5CR, 0x01))
            }
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            If ((H5TC == 0x00))
            {
                Return (GPLD (H5VS, 0x05))
            }
            Else
            {
                Return (\_SB.UBTC.RUCC (H5CR, 0x02))
            }
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS06)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            CopyObject (\UPCI, UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS06._UPC.UPCP */
            Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS06._UPC.UPCP */
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10){})
            PLDP = \PLDI
            Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS06._PLD.PLDP */
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS07)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            CopyObject (\UPCI, UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS07._UPC.UPCP */
            Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS07._UPC.UPCP */
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10){})
            PLDP = \PLDI
            Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS07._PLD.PLDP */
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS08)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            CopyObject (\UPCI, UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS08._UPC.UPCP */
            Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS08._UPC.UPCP */
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10){})
            PLDP = \PLDI
            Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS08._PLD.PLDP */
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS09)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            CopyObject (\UPCI, UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS09._UPC.UPCP */
            Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS09._UPC.UPCP */
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10){})
            PLDP = \PLDI
            Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS09._PLD.PLDP */
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS10)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            CopyObject (\UPCI, UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS10._UPC.UPCP */
            Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS10._UPC.UPCP */
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10){})
            PLDP = \PLDI
            Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS10._PLD.PLDP */
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.SS01)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            CopyObject (\UPCI, UPCP) /* \_SB_.PCI0.XHC_.RHUB.SS01._UPC.UPCP */
            Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.SS01._UPC.UPCP */
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10){})
            PLDP = \PLDI
            Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.SS01._PLD.PLDP */
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.SS02)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            If ((S2TC == 0x00))
            {
                Return (GUPC (S2CN))
            }
            Else
            {
                Return (\_SB.UBTC.RUCC (S2CR, 0x01))
            }
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            If ((S2TC == 0x00))
            {
                Return (GPLD (S2VS, S2CP))
            }
            Else
            {
                Return (\_SB.UBTC.RUCC (S2CR, 0x02))
            }
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.SS03)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            CopyObject (\UPC1, UPCP) /* \_SB_.PCI0.XHC_.RHUB.SS03._UPC.UPCP */
            Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.SS03._UPC.UPCP */
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10){})
            PLDP = \PLD1
            Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.SS03._PLD.PLDP */
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.SS04)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            CopyObject (\UPC2, UPCP) /* \_SB_.PCI0.XHC_.RHUB.SS04._UPC.UPCP */
            Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.SS04._UPC.UPCP */
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10){})
            PLDP = \PLD2
            Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.SS04._PLD.PLDP */
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.SS05)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            If ((S5TC == 0x00))
            {
                Return (GUPC (S5CN))
            }
            Else
            {
                Return (\_SB.UBTC.RUCC (S5CR, 0x01))
            }
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            If ((S5TC == 0x00))
            {
                Return (GPLD (S5VS, S5CP))
            }
            Else
            {
                Return (\_SB.UBTC.RUCC (S5CR, 0x02))
            }
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.SS06)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            CopyObject (\UPCI, UPCP) /* \_SB_.PCI0.XHC_.RHUB.SS06._UPC.UPCP */
            Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.SS06._UPC.UPCP */
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10){})
            PLDP = \PLDI
            Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.SS06._PLD.PLDP */
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS08)
    {
        Device (WCAM)
        {
            Name (_ADR, 0x08)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (\WIN8)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
            {
                Return (\UPCI)
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (\PLDC)
            }
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS08)
    {
        Device (ICAM)
        {
            Name (_ADR, 0x0A)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (\WIN8)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
            {
                Return (\UPCI)
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (\PLDC)
            }
        }
    }

    Scope (\_SB.PCI0.XHC)
    {
        Name (UPWR, 0x00)
        Name (USPP, 0x00)
    }

    Scope (\_SB.PCI0.XHC.RHUB)
    {
        Method (PS0X, 0, Serialized)
        {
            \_SB.PCI0.XHC.USPP = 0x00
        }

        Method (PS2X, 0, Serialized)
        {
            OperationRegion (XHCM, SystemMemory, (ToInteger (MEMB) & 0xFFFFFFFFFFFF0000), 0x0600)
            Field (XHCM, DWordAcc, NoLock, Preserve)
            {
                Offset (0x02), 
                XHCV,   16, 
                Offset (0x480), 
                HP01,   1, 
                Offset (0x490), 
                HP02,   1, 
                Offset (0x530), 
                SP00,   1, 
                Offset (0x540), 
                SP01,   1
            }

            If ((XHCV == 0xFFFF))
            {
                Return (Zero)
            }

            If (((HP01 == 0x00) && (SP00 == 0x00)))
            {
                \_SB.PCI0.XHC.USPP |= 0x02
            }

            If (((HP02 == 0x00) && (SP01 == 0x00)))
            {
                \_SB.PCI0.XHC.USPP |= 0x04
            }
        }

        Method (PS3X, 0, Serialized)
        {
        }
    }

    Scope (\_SB.PCI0.SAT0)
    {
        Scope (PRT0)
        {
            Name (DIP0, 0x00)
            Name (FDEV, Zero)
            Name (FDRP, Zero)
            Name (HDTF, Buffer (0x0E)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5               // ......
            })
            Name (HETF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x09,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            Name (ERTF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x5F, 0x00,  // ......_.
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            Name (HPTF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x03,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            Name (HQTF, Buffer (0x1C)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x03,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10, 0x09, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0xA0, 0xEF                           // ....
            })
            Name (HXTF, Buffer (0x1C)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x5F, 0x00,  // ......_.
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10, 0x03, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0xA0, 0xEF                           // ....
            })
            Name (DDTF, Buffer (0x0E)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3               // ......
            })
            CreateByteField (DDTF, 0x01, DTAT)
            CreateByteField (DDTF, 0x08, DTFT)
            Name (DGTF, Buffer (0x15)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x10, 0x03,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            CreateByteField (DGTF, 0x01, GTAT)
            CreateByteField (DGTF, 0x08, GTFT)
            Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
            {
                ADBG ("PRT0: _SDD")
                DIP0 = 0x00
                If ((SizeOf (Arg0) == 0x0200))
                {
                    CreateWordField (Arg0, 0x9C, M078)
                    If ((\DPP0 && (M078 & 0x08)))
                    {
                        DIP0 = 0x01
                    }

                    CreateByteField (Arg0, 0x9D, BFDS)
                    ToInteger (BFDS, FDEV) /* \_SB_.PCI0.SAT0.PRT0.FDEV */
                    CreateByteField (Arg0, 0x9A, BFRP)
                    ToInteger (BFRP, FDRP) /* \_SB_.PCI0.SAT0.PRT0.FDRP */
                }
            }

            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                ADBG ("PRT0: _GTF")
                If (DIP0)
                {
                    If ((((DVS0 == 0x01) && ((FDEV & 0x01) == 0x01)) && 
                        ((FDRP & 0x80) == 0x80)))
                    {
                        Return (HQTF) /* \_SB_.PCI0.SAT0.PRT0.HQTF */
                    }
                    Else
                    {
                        Return (HPTF) /* \_SB_.PCI0.SAT0.PRT0.HPTF */
                    }
                }
                ElseIf ((((DVS0 == 0x01) && ((FDEV & 0x01) == 
                    0x01)) && ((FDRP & 0x80) == 0x80)))
                {
                    Return (HETF) /* \_SB_.PCI0.SAT0.PRT0.HETF */
                }
                Else
                {
                    Return (HDTF) /* \_SB_.PCI0.SAT0.PRT0.HDTF */
                }
            }
        }

        Scope (PRT1)
        {
            Name (DIP0, 0x00)
            Name (FDEV, 0x00)
            Name (FDRP, 0x00)
            Name (HDTF, Buffer (0x0E)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5               // ......
            })
            Name (HETF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x09,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            Name (ERTF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x5F, 0x00,  // ......_.
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            Name (HPTF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x03,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            Name (HQTF, Buffer (0x1C)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x03,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10, 0x09, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0xA0, 0xEF                           // ....
            })
            Name (HXTF, Buffer (0x1C)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x5F, 0x00,  // ......_.
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10, 0x03, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0xA0, 0xEF                           // ....
            })
            Name (DDTF, Buffer (0x0E)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3               // ......
            })
            CreateByteField (DDTF, 0x01, DTAT)
            CreateByteField (DDTF, 0x08, DTFT)
            Name (DGTF, Buffer (0x15)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x10, 0x03,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            CreateByteField (DGTF, 0x01, GTAT)
            CreateByteField (DGTF, 0x08, GTFT)
            Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
            {
                ADBG ("PRT1: _SDD")
                DIP0 = 0x00
                If ((SizeOf (Arg0) == 0x0200))
                {
                    CreateWordField (Arg0, 0x9C, M078)
                    If ((\DPP1 && (M078 & 0x08)))
                    {
                        DIP0 = 0x01
                    }

                    CreateByteField (Arg0, 0x9D, BFDS)
                    ToInteger (BFDS, FDEV) /* \_SB_.PCI0.SAT0.PRT1.FDEV */
                    CreateByteField (Arg0, 0x9A, BFRP)
                    ToInteger (BFRP, FDRP) /* \_SB_.PCI0.SAT0.PRT1.FDRP */
                }
            }

            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                ADBG ("PRT1: _GTF")
                If (DIP0)
                {
                    If ((((DVS1 == 0x01) && ((FDEV & 0x01) == 0x01)) && 
                        ((FDRP & 0x80) == 0x80)))
                    {
                        Return (HQTF) /* \_SB_.PCI0.SAT0.PRT1.HQTF */
                    }
                    Else
                    {
                        Return (HPTF) /* \_SB_.PCI0.SAT0.PRT1.HPTF */
                    }
                }
                ElseIf ((((DVS1 == 0x01) && ((FDEV & 0x01) == 
                    0x01)) && ((FDRP & 0x80) == 0x80)))
                {
                    Return (HETF) /* \_SB_.PCI0.SAT0.PRT1.HETF */
                }
                Else
                {
                    Return (HDTF) /* \_SB_.PCI0.SAT0.PRT1.HDTF */
                }
            }
        }

        Scope (PRT2)
        {
            Name (DIP0, 0x00)
            Name (FDEV, 0x00)
            Name (FDRP, 0x00)
            Name (HDTF, Buffer (0x0E)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5               // ......
            })
            Name (HETF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x09,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            Name (ERTF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x5F, 0x00,  // ......_.
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            Name (HPTF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x03,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            Name (HQTF, Buffer (0x1C)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x03,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10, 0x09, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0xA0, 0xEF                           // ....
            })
            Name (HXTF, Buffer (0x1C)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x5F, 0x00,  // ......_.
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10, 0x03, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0xA0, 0xEF                           // ....
            })
            Name (DDTF, Buffer (0x0E)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3               // ......
            })
            CreateByteField (DDTF, 0x01, DTAT)
            CreateByteField (DDTF, 0x08, DTFT)
            Name (DGTF, Buffer (0x15)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x10, 0x03,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            CreateByteField (DGTF, 0x01, GTAT)
            CreateByteField (DGTF, 0x08, GTFT)
            Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
            {
                ADBG ("PRT2: _SDD")
                DIP0 = 0x00
                If ((SizeOf (Arg0) == 0x0200))
                {
                    CreateWordField (Arg0, 0x9C, M078)
                    If ((\DPP2 && (M078 & 0x08)))
                    {
                        DIP0 = 0x01
                    }

                    CreateByteField (Arg0, 0x9D, BFDS)
                    ToInteger (BFDS, FDEV) /* \_SB_.PCI0.SAT0.PRT2.FDEV */
                    CreateByteField (Arg0, 0x9A, BFRP)
                    ToInteger (BFRP, FDRP) /* \_SB_.PCI0.SAT0.PRT2.FDRP */
                }
            }

            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                ADBG ("PRT2: _GTF")
                If (DIP0)
                {
                    If ((((DVS2 == 0x01) && ((FDEV & 0x01) == 0x01)) && 
                        ((FDRP & 0x80) == 0x80)))
                    {
                        Return (HQTF) /* \_SB_.PCI0.SAT0.PRT2.HQTF */
                    }
                    Else
                    {
                        Return (HPTF) /* \_SB_.PCI0.SAT0.PRT2.HPTF */
                    }
                }
                ElseIf ((((DVS2 == 0x01) && ((FDEV & 0x01) == 
                    0x01)) && ((FDRP & 0x80) == 0x80)))
                {
                    Return (HETF) /* \_SB_.PCI0.SAT0.PRT2.HETF */
                }
                Else
                {
                    Return (HDTF) /* \_SB_.PCI0.SAT0.PRT2.HDTF */
                }
            }
        }

        Scope (PRT3)
        {
            Name (DIP0, 0x00)
            Name (FDEV, 0x00)
            Name (FDRP, 0x00)
            Name (HDTF, Buffer (0x0E)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5               // ......
            })
            Name (HETF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x09,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            Name (ERTF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x5F, 0x00,  // ......_.
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            Name (HPTF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x03,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            Name (HQTF, Buffer (0x1C)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x03,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10, 0x09, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0xA0, 0xEF                           // ....
            })
            Name (HXTF, Buffer (0x1C)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x5F, 0x00,  // ......_.
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10, 0x03, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0xA0, 0xEF                           // ....
            })
            Name (DDTF, Buffer (0x0E)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3               // ......
            })
            CreateByteField (DDTF, 0x01, DTAT)
            CreateByteField (DDTF, 0x08, DTFT)
            Name (DGTF, Buffer (0x15)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x10, 0x03,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            CreateByteField (DGTF, 0x01, GTAT)
            CreateByteField (DGTF, 0x08, GTFT)
            Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
            {
                ADBG ("PRT3: _SDD")
                DIP0 = 0x00
                If ((SizeOf (Arg0) == 0x0200))
                {
                    CreateWordField (Arg0, 0x9C, M078)
                    If ((\DPP3 && (M078 & 0x08)))
                    {
                        DIP0 = 0x01
                    }

                    CreateByteField (Arg0, 0x9D, BFDS)
                    ToInteger (BFDS, FDEV) /* \_SB_.PCI0.SAT0.PRT3.FDEV */
                    CreateByteField (Arg0, 0x9A, BFRP)
                    ToInteger (BFRP, FDRP) /* \_SB_.PCI0.SAT0.PRT3.FDRP */
                }
            }

            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                ADBG ("PRT3: _GTF")
                If (DIP0)
                {
                    If ((((DVS3 == 0x01) && ((FDEV & 0x01) == 0x01)) && 
                        ((FDRP & 0x80) == 0x80)))
                    {
                        Return (HQTF) /* \_SB_.PCI0.SAT0.PRT3.HQTF */
                    }
                    Else
                    {
                        Return (HPTF) /* \_SB_.PCI0.SAT0.PRT3.HPTF */
                    }
                }
                ElseIf ((((DVS3 == 0x01) && ((FDEV & 0x01) == 
                    0x01)) && ((FDRP & 0x80) == 0x80)))
                {
                    Return (HETF) /* \_SB_.PCI0.SAT0.PRT3.HETF */
                }
                Else
                {
                    Return (HDTF) /* \_SB_.PCI0.SAT0.PRT3.HDTF */
                }
            }
        }

        Scope (PRT4)
        {
            Name (DIP0, 0x00)
            Name (HDTF, Buffer (0x0E)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5               // ......
            })
            Name (HETF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x09,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            Name (ERTF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x5F, 0x00,  // ......_.
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            Name (HPTF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x03,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            Name (HQTF, Buffer (0x1C)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x03,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10, 0x09, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0xA0, 0xEF                           // ....
            })
            Name (HXTF, Buffer (0x1C)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x5F, 0x00,  // ......_.
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10, 0x03, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0xA0, 0xEF                           // ....
            })
            Name (DDTF, Buffer (0x0E)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3               // ......
            })
            CreateByteField (DDTF, 0x01, DTAT)
            CreateByteField (DDTF, 0x08, DTFT)
            Name (DGTF, Buffer (0x15)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x10, 0x03,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            CreateByteField (DGTF, 0x01, GTAT)
            CreateByteField (DGTF, 0x08, GTFT)
            Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
            {
                ADBG ("PRT4: _SDD")
                DIP0 = 0x00
                If ((SizeOf (Arg0) == 0x0200))
                {
                    CreateWordField (Arg0, 0x9C, M078)
                    If ((\DPP4 && (M078 & 0x08)))
                    {
                        DIP0 = 0x01
                    }
                }
            }

            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                ADBG ("PRT4: _GTF")
                If (DIP0)
                {
                    Return (HPTF) /* \_SB_.PCI0.SAT0.PRT4.HPTF */
                }

                Return (HDTF) /* \_SB_.PCI0.SAT0.PRT4.HDTF */
            }
        }
    }

    Scope (\_SB.PCI0.SAT0)
    {
        Scope (PRT0)
        {
            Name (PORT, 0x00)
            Name (PBAR, 0x0118)
            Name (PWRG, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
        }

        Scope (PRT1)
        {
            Name (PORT, 0x01)
            Name (PBAR, 0x0198)
            Name (PWRG, Package (0x04)
            {
                0x02, 
                0x00, 
                0x00, 
                0x00
            })
        }

        Scope (PRT2)
        {
            Name (PORT, 0x02)
            Name (PBAR, 0x0218)
            Name (PWRG, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x01
            })
        }
    }

    Scope (\_SB.IETM)
    {
        Name (DBD1, Package (0x01)
        {
            Buffer (0x043E)
            {
                /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,  // ...@gddv
                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,  // ....OEM 
                /* 0030 */  0x45, 0x6D, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64,  // Embedded
                /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,  //  DataVau
                /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // lt......
                /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x91, 0xC3, 0x44, 0x94,  // ......D.
                /* 0070 */  0xBF, 0x47, 0x69, 0x23, 0x67, 0x61, 0x72, 0xD8,  // .Gi#gar.
                /* 0078 */  0x69, 0x1F, 0xD2, 0x57, 0x0B, 0x99, 0x2F, 0xF7,  // i..W../.
                /* 0080 */  0x5C, 0x4E, 0x9B, 0x81, 0xA4, 0xD8, 0x60, 0xD2,  // \N....`.
                /* 0088 */  0x58, 0xA1, 0x61, 0xE9, 0xAA, 0x03, 0x00, 0x00,  // X.a.....
                /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                /* 0098 */  0x01, 0x9A, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..=.....
                /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x44, 0xDA, 0xEE,  // u8...D..
                /* 00D0 */  0x83, 0x31, 0xF3, 0x34, 0x35, 0xF1, 0xA2, 0x39,  // .1.45..9
                /* 00D8 */  0x9E, 0x0C, 0x7A, 0x03, 0x33, 0xF4, 0xBB, 0xC4,  // ..z.3...
                /* 00E0 */  0x51, 0x73, 0xA8, 0xB6, 0xC8, 0xBA, 0x67, 0xDE,  // Qs....g.
                /* 00E8 */  0x3A, 0x31, 0xE6, 0x61, 0xFD, 0x63, 0xEA, 0xEE,  // :1.a.c..
                /* 00F0 */  0xAB, 0x61, 0xDA, 0xAB, 0xBF, 0xAD, 0x74, 0xBF,  // .a....t.
                /* 00F8 */  0xFB, 0xE5, 0x39, 0x34, 0x9B, 0xDE, 0xD2, 0x63,  // ..94...c
                /* 0100 */  0x63, 0x6E, 0x95, 0x54, 0x30, 0x4F, 0xF7, 0xA6,  // cn.T0O..
                /* 0108 */  0x00, 0x83, 0xC7, 0x90, 0x07, 0x39, 0xAD, 0xE1,  // .....9..
                /* 0110 */  0xFA, 0x22, 0x1D, 0x8C, 0x0C, 0x69, 0x55, 0x0E,  // ."...iU.
                /* 0118 */  0x21, 0x09, 0x82, 0x40, 0x76, 0x5F, 0xD1, 0xC5,  // !..@v_..
                /* 0120 */  0x16, 0xB1, 0x60, 0xD2, 0x5F, 0x0A, 0xC4, 0x0D,  // ..`._...
                /* 0128 */  0x61, 0xCC, 0x68, 0x33, 0x93, 0x8B, 0x87, 0x7C,  // a.h3...|
                /* 0130 */  0x4F, 0xB8, 0x9B, 0x82, 0x88, 0x52, 0x21, 0xE0,  // O....R!.
                /* 0138 */  0xFC, 0x6B, 0x06, 0xE6, 0x4E, 0x85, 0x9B, 0x82,  // .k..N...
                /* 0140 */  0x6A, 0x76, 0x8F, 0x4A, 0xD2, 0x04, 0xEE, 0x26,  // jv.J...&
                /* 0148 */  0x44, 0x4E, 0x55, 0x9D, 0x1F, 0xA3, 0xB7, 0x08,  // DNU.....
                /* 0150 */  0x65, 0xB0, 0x6D, 0xBE, 0x97, 0x46, 0xB0, 0x54,  // e.m..F.T
                /* 0158 */  0x5E, 0xF0, 0xE9, 0xB0, 0x19, 0x9B, 0x44, 0xAD,  // ^.....D.
                /* 0160 */  0xF8, 0xCA, 0x18, 0xD5, 0xF6, 0xAB, 0xAC, 0x79,  // .......y
                /* 0168 */  0xDA, 0xBE, 0x87, 0xE1, 0x1D, 0x46, 0x04, 0x45,  // .....F.E
                /* 0170 */  0x60, 0xD5, 0x0E, 0xC0, 0x90, 0x87, 0x1E, 0x35,  // `......5
                /* 0178 */  0x6A, 0xB1, 0xEC, 0xA8, 0x22, 0x89, 0x6C, 0xE2,  // j...".l.
                /* 0180 */  0x38, 0x3F, 0x7F, 0xD7, 0xAE, 0xDF, 0xC7, 0x11,  // 8?......
                /* 0188 */  0x54, 0xBF, 0xA5, 0xE0, 0x55, 0xBE, 0xAB, 0x62,  // T...U..b
                /* 0190 */  0xC4, 0x57, 0x7C, 0xBF, 0x02, 0x4D, 0x0D, 0xE7,  // .W|..M..
                /* 0198 */  0x78, 0x3E, 0xAE, 0x1D, 0x7E, 0x7F, 0xE1, 0x58,  // x>..~..X
                /* 01A0 */  0x69, 0x1E, 0xB0, 0x90, 0xDC, 0xF7, 0xD7, 0xD2,  // i.......
                /* 01A8 */  0xF1, 0xB4, 0x9A, 0xD8, 0x1C, 0x16, 0x68, 0x3F,  // ......h?
                /* 01B0 */  0x97, 0xDA, 0x4B, 0xD5, 0xBC, 0xBA, 0x78, 0x03,  // ..K...x.
                /* 01B8 */  0x29, 0xA8, 0x64, 0x1B, 0x01, 0xA2, 0x7A, 0x88,  // ).d...z.
                /* 01C0 */  0x53, 0xFE, 0x99, 0x8C, 0x33, 0xD9, 0x7A, 0xF4,  // S...3.z.
                /* 01C8 */  0xB4, 0xDA, 0x69, 0x38, 0x75, 0x80, 0x33, 0x3F,  // ..i8u.3?
                /* 01D0 */  0x4F, 0x13, 0x5B, 0x8B, 0x75, 0x2C, 0x49, 0x21,  // O.[.u,I!
                /* 01D8 */  0xD3, 0xA2, 0xE5, 0x93, 0xF6, 0x1E, 0x3D, 0xF4,  // ......=.
                /* 01E0 */  0x8D, 0xE7, 0x3A, 0xBE, 0x3A, 0x66, 0x40, 0xA1,  // ..:.:f@.
                /* 01E8 */  0x42, 0x7A, 0x89, 0x96, 0x90, 0x3D, 0xFE, 0xE2,  // Bz...=..
                /* 01F0 */  0xFF, 0x62, 0x89, 0x11, 0xE3, 0xE4, 0x5B, 0xD5,  // .b....[.
                /* 01F8 */  0xC8, 0x37, 0x31, 0x4F, 0x27, 0x44, 0x6C, 0xE3,  // .71O'Dl.
                /* 0200 */  0xB4, 0xF6, 0x28, 0x21, 0x1A, 0x7D, 0xAC, 0x39,  // ..(!.}.9
                /* 0208 */  0xC1, 0xCF, 0x9A, 0x83, 0x71, 0x78, 0x6E, 0x5C,  // ....qxn\
                /* 0210 */  0x26, 0xFF, 0x65, 0xCE, 0xFE, 0x07, 0x2B, 0x40,  // &.e...+@
                /* 0218 */  0xF8, 0x38, 0x25, 0x54, 0x80, 0xAB, 0xD7, 0x80,  // .8%T....
                /* 0220 */  0x99, 0xD3, 0x93, 0x71, 0x18, 0x07, 0x95, 0x01,  // ...q....
                /* 0228 */  0x37, 0x21, 0xCC, 0x24, 0x54, 0x24, 0xEA, 0x3E,  // 7!.$T$.>
                /* 0230 */  0x9D, 0xA4, 0xDC, 0xBD, 0x92, 0xAA, 0xCF, 0x56,  // .......V
                /* 0238 */  0xEA, 0x1C, 0x17, 0x6F, 0xE4, 0x01, 0x37, 0x74,  // ...o..7t
                /* 0240 */  0x50, 0x15, 0x2F, 0xDA, 0x06, 0x8E, 0x8E, 0xE2,  // P./.....
                /* 0248 */  0x2B, 0x65, 0xF3, 0x6F, 0x81, 0xA3, 0x70, 0x47,  // +e.o..pG
                /* 0250 */  0x3C, 0x65, 0xBF, 0x70, 0x42, 0xFC, 0x1D, 0x32,  // <e.pB..2
                /* 0258 */  0xBF, 0x07, 0xC6, 0x01, 0xE0, 0x43, 0xF7, 0x7A,  // .....C.z
                /* 0260 */  0x1C, 0x5C, 0xB5, 0x18, 0x43, 0x56, 0xB2, 0xEC,  // .\..CV..
                /* 0268 */  0x32, 0x4B, 0x4E, 0x2A, 0xF0, 0x0D, 0x9E, 0x81,  // 2KN*....
                /* 0270 */  0x4A, 0xFE, 0xB3, 0x3A, 0xDB, 0xA2, 0x97, 0x16,  // J..:....
                /* 0278 */  0x5B, 0x92, 0xFF, 0x20, 0x8F, 0x8E, 0x81, 0x5B,  // [.. ...[
                /* 0280 */  0x45, 0x71, 0x62, 0xE8, 0x4D, 0x81, 0xFB, 0xA8,  // Eqb.M...
                /* 0288 */  0xA4, 0x2B, 0xB2, 0x65, 0xB3, 0xAB, 0x3F, 0xC8,  // .+.e..?.
                /* 0290 */  0x78, 0xBE, 0x5C, 0xC0, 0x27, 0xFF, 0x5C, 0x5E,  // x.\.'.\^
                /* 0298 */  0xE3, 0x70, 0x6F, 0xAE, 0xAC, 0x09, 0xD6, 0xF3,  // .po.....
                /* 02A0 */  0xC4, 0x3C, 0x16, 0x0C, 0xBB, 0x1F, 0x4D, 0xA3,  // .<....M.
                /* 02A8 */  0x40, 0xD2, 0x2A, 0xC1, 0xEF, 0xB5, 0x1C, 0xE5,  // @.*.....
                /* 02B0 */  0x2D, 0xFB, 0xE5, 0x5D, 0x97, 0x6E, 0xFA, 0xD9,  // -..].n..
                /* 02B8 */  0x37, 0xAD, 0x18, 0x88, 0x1F, 0x5C, 0x1C, 0x99,  // 7....\..
                /* 02C0 */  0xC4, 0x77, 0xCD, 0x73, 0x98, 0xE7, 0x5C, 0x07,  // .w.s..\.
                /* 02C8 */  0x9C, 0x6F, 0x41, 0xA4, 0x8A, 0xD6, 0xEE, 0xA2,  // .oA.....
                /* 02D0 */  0x69, 0xB3, 0x13, 0xC4, 0xEB, 0x5E, 0x87, 0x57,  // i....^.W
                /* 02D8 */  0xBE, 0x73, 0xF7, 0x08, 0xAC, 0xF9, 0xE7, 0x98,  // .s......
                /* 02E0 */  0x2B, 0x87, 0x33, 0xEB, 0x2B, 0x86, 0xA2, 0xAE,  // +.3.+...
                /* 02E8 */  0x6E, 0xFC, 0xDE, 0xD7, 0x2B, 0xD5, 0x4D, 0x54,  // n...+.MT
                /* 02F0 */  0x6A, 0x4F, 0x6F, 0x6F, 0x51, 0xA4, 0xF1, 0x6D,  // jOooQ..m
                /* 02F8 */  0x21, 0x3D, 0xCC, 0x58, 0x57, 0xE4, 0x03, 0x84,  // !=.XW...
                /* 0300 */  0x28, 0x8F, 0x03, 0xCF, 0x97, 0x13, 0x58, 0x3D,  // (.....X=
                /* 0308 */  0x00, 0xE4, 0x61, 0x60, 0x47, 0x3C, 0x9F, 0xD4,  // ..a`G<..
                /* 0310 */  0x9B, 0x25, 0x52, 0xAF, 0xA7, 0xAF, 0x23, 0xE6,  // .%R...#.
                /* 0318 */  0x50, 0x0F, 0xD9, 0x4C, 0xEA, 0x05, 0x73, 0x8A,  // P..L..s.
                /* 0320 */  0xF5, 0x29, 0x01, 0x7A, 0x1D, 0x48, 0xA3, 0xE9,  // .).z.H..
                /* 0328 */  0x20, 0x4A, 0xD7, 0x34, 0xEB, 0xAE, 0xC8, 0xD6,  //  J.4....
                /* 0330 */  0x2F, 0x7E, 0xA2, 0x7A, 0x1E, 0xFE, 0x01, 0xAC,  // /~.z....
                /* 0338 */  0xD2, 0x10, 0x22, 0x1E, 0xB0, 0xE1, 0x38, 0xB7,  // .."...8.
                /* 0340 */  0x8F, 0x8A, 0xD7, 0x36, 0x93, 0x32, 0xCA, 0x0D,  // ...6.2..
                /* 0348 */  0x58, 0x98, 0x06, 0xDF, 0x26, 0x58, 0x5D, 0xE8,  // X...&X].
                /* 0350 */  0xF7, 0x59, 0x2F, 0xF7, 0xD7, 0xD4, 0x20, 0x5D,  // .Y/... ]
                /* 0358 */  0x96, 0x10, 0x1D, 0x9C, 0x19, 0x07, 0x43, 0x44,  // ......CD
                /* 0360 */  0x4F, 0x52, 0x93, 0xD8, 0xEC, 0x67, 0x41, 0x80,  // OR...gA.
                /* 0368 */  0xFE, 0x82, 0xEF, 0xBF, 0xCF, 0xDA, 0xEF, 0x8F,  // ........
                /* 0370 */  0xEF, 0xA9, 0x61, 0x1A, 0x06, 0xD5, 0xDE, 0xB8,  // ..a.....
                /* 0378 */  0x84, 0x3A, 0x9E, 0x1E, 0x5B, 0xC8, 0xF6, 0xC1,  // .:..[...
                /* 0380 */  0xF4, 0xC6, 0x73, 0x97, 0x65, 0xD1, 0xF9, 0x15,  // ..s.e...
                /* 0388 */  0xEE, 0x70, 0x24, 0xB2, 0x7D, 0xFE, 0xEC, 0x0E,  // .p$.}...
                /* 0390 */  0xDB, 0x17, 0x1E, 0x5D, 0x62, 0x67, 0x94, 0x2C,  // ...]bg.,
                /* 0398 */  0x13, 0x88, 0x16, 0x40, 0x39, 0xC6, 0xFC, 0x77,  // ...@9..w
                /* 03A0 */  0xE9, 0xC0, 0xCD, 0x2B, 0x42, 0x13, 0x12, 0x46,  // ...+B..F
                /* 03A8 */  0x7C, 0xCE, 0xED, 0x71, 0x24, 0xF1, 0x43, 0x5E,  // |..q$.C^
                /* 03B0 */  0xEA, 0xD0, 0x12, 0xA2, 0x43, 0xD7, 0x68, 0xDD,  // ....C.h.
                /* 03B8 */  0x87, 0x7F, 0x20, 0x48, 0xD5, 0x94, 0x57, 0x6B,  // .. H..Wk
                /* 03C0 */  0xAF, 0x87, 0xFB, 0x65, 0x25, 0x06, 0x12, 0x05,  // ...e%...
                /* 03C8 */  0xBB, 0xD7, 0x2F, 0x1D, 0xA9, 0xCA, 0x56, 0xF0,  // ../...V.
                /* 03D0 */  0xF5, 0xE4, 0xFF, 0x67, 0xD6, 0x69, 0x21, 0xD3,  // ...g.i!.
                /* 03D8 */  0xCD, 0xF3, 0xF5, 0x1B, 0x37, 0xAC, 0x73, 0xF1,  // ....7.s.
                /* 03E0 */  0xF3, 0xFE, 0xB2, 0xD7, 0xAD, 0xE3, 0xD2, 0x63,  // .......c
                /* 03E8 */  0xAD, 0xED, 0x68, 0xBE, 0xDB, 0xCD, 0xC0, 0x41,  // ..h....A
                /* 03F0 */  0x2C, 0x92, 0x64, 0x82, 0x05, 0x93, 0xA8, 0x66,  // ,.d....f
                /* 03F8 */  0x0D, 0xAB, 0x19, 0x61, 0x01, 0x30, 0x3E, 0x1B,  // ...a.0>.
                /* 0400 */  0x8C, 0x2C, 0xD7, 0x2D, 0xC2, 0x22, 0x77, 0x80,  // .,.-."w.
                /* 0408 */  0x79, 0x1F, 0x5D, 0x61, 0x7A, 0x59, 0x4A, 0xEE,  // y.]azYJ.
                /* 0410 */  0x1E, 0xCA, 0x85, 0x89, 0xA2, 0xED, 0x95, 0x76,  // .......v
                /* 0418 */  0xAC, 0x30, 0x52, 0xA9, 0xD8, 0x75, 0x0B, 0x5C,  // .0R..u.\
                /* 0420 */  0x2F, 0xED, 0xD9, 0x45, 0x37, 0x73, 0x05, 0x58,  // /..E7s.X
                /* 0428 */  0x39, 0xA1, 0xD3, 0x08, 0x64, 0x7C, 0xDC, 0x55,  // 9...d|.U
                /* 0430 */  0x7B, 0xDF, 0xF9, 0x1A, 0xFC, 0x32, 0x5E, 0x2D,  // {....2^-
                /* 0438 */  0x59, 0x08, 0xBD, 0x33, 0xB1, 0x00               // Y..3..
            }
        })
        Name (DBD2, Package (0x01)
        {
            Buffer (0x043E)
            {
                /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,  // ...@gddv
                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,  // ....OEM 
                /* 0030 */  0x45, 0x6D, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64,  // Embedded
                /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,  //  DataVau
                /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // lt......
                /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x91, 0xC3, 0x44, 0x94,  // ......D.
                /* 0070 */  0xBF, 0x47, 0x69, 0x23, 0x67, 0x61, 0x72, 0xD8,  // .Gi#gar.
                /* 0078 */  0x69, 0x1F, 0xD2, 0x57, 0x0B, 0x99, 0x2F, 0xF7,  // i..W../.
                /* 0080 */  0x5C, 0x4E, 0x9B, 0x81, 0xA4, 0xD8, 0x60, 0xD2,  // \N....`.
                /* 0088 */  0x58, 0xA1, 0x61, 0xE9, 0xAA, 0x03, 0x00, 0x00,  // X.a.....
                /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                /* 0098 */  0x01, 0x9A, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..=.....
                /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x44, 0xDA, 0xEE,  // u8...D..
                /* 00D0 */  0x83, 0x31, 0xF3, 0x34, 0x35, 0xF1, 0xA2, 0x39,  // .1.45..9
                /* 00D8 */  0x9E, 0x0C, 0x7A, 0x03, 0x33, 0xF4, 0xBB, 0xC4,  // ..z.3...
                /* 00E0 */  0x51, 0x73, 0xA8, 0xB6, 0xC8, 0xBA, 0x67, 0xDE,  // Qs....g.
                /* 00E8 */  0x3A, 0x31, 0xE6, 0x61, 0xFD, 0x63, 0xEA, 0xEE,  // :1.a.c..
                /* 00F0 */  0xAB, 0x61, 0xDA, 0xAB, 0xBF, 0xAD, 0x74, 0xBF,  // .a....t.
                /* 00F8 */  0xFB, 0xE5, 0x39, 0x34, 0x9B, 0xDE, 0xD2, 0x63,  // ..94...c
                /* 0100 */  0x63, 0x6E, 0x95, 0x54, 0x30, 0x4F, 0xF7, 0xA6,  // cn.T0O..
                /* 0108 */  0x00, 0x83, 0xC7, 0x90, 0x07, 0x39, 0xAD, 0xE1,  // .....9..
                /* 0110 */  0xFA, 0x22, 0x1D, 0x8C, 0x0C, 0x69, 0x55, 0x0E,  // ."...iU.
                /* 0118 */  0x21, 0x09, 0x82, 0x40, 0x76, 0x5F, 0xD1, 0xC5,  // !..@v_..
                /* 0120 */  0x16, 0xB1, 0x60, 0xD2, 0x5F, 0x0A, 0xC4, 0x0D,  // ..`._...
                /* 0128 */  0x61, 0xCC, 0x68, 0x33, 0x93, 0x8B, 0x87, 0x7C,  // a.h3...|
                /* 0130 */  0x4F, 0xB8, 0x9B, 0x82, 0x88, 0x52, 0x21, 0xE0,  // O....R!.
                /* 0138 */  0xFC, 0x6B, 0x06, 0xE6, 0x4E, 0x85, 0x9B, 0x82,  // .k..N...
                /* 0140 */  0x6A, 0x76, 0x8F, 0x4A, 0xD2, 0x04, 0xEE, 0x26,  // jv.J...&
                /* 0148 */  0x44, 0x4E, 0x55, 0x9D, 0x1F, 0xA3, 0xB7, 0x08,  // DNU.....
                /* 0150 */  0x65, 0xB0, 0x6D, 0xBE, 0x97, 0x46, 0xB0, 0x54,  // e.m..F.T
                /* 0158 */  0x5E, 0xF0, 0xE9, 0xB0, 0x19, 0x9B, 0x44, 0xAD,  // ^.....D.
                /* 0160 */  0xF8, 0xCA, 0x18, 0xD5, 0xF6, 0xAB, 0xAC, 0x79,  // .......y
                /* 0168 */  0xDA, 0xBE, 0x87, 0xE1, 0x1D, 0x46, 0x04, 0x45,  // .....F.E
                /* 0170 */  0x60, 0xD5, 0x0E, 0xC0, 0x90, 0x87, 0x1E, 0x35,  // `......5
                /* 0178 */  0x6A, 0xB1, 0xEC, 0xA8, 0x22, 0x89, 0x6C, 0xE2,  // j...".l.
                /* 0180 */  0x38, 0x3F, 0x7F, 0xD7, 0xAE, 0xDF, 0xC7, 0x11,  // 8?......
                /* 0188 */  0x54, 0xBF, 0xA5, 0xE0, 0x55, 0xBE, 0xAB, 0x62,  // T...U..b
                /* 0190 */  0xC4, 0x57, 0x7C, 0xBF, 0x02, 0x4D, 0x0D, 0xE7,  // .W|..M..
                /* 0198 */  0x78, 0x3E, 0xAE, 0x1D, 0x7E, 0x7F, 0xE1, 0x58,  // x>..~..X
                /* 01A0 */  0x69, 0x1E, 0xB0, 0x90, 0xDC, 0xF7, 0xD7, 0xD2,  // i.......
                /* 01A8 */  0xF1, 0xB4, 0x9A, 0xD8, 0x1C, 0x16, 0x68, 0x3F,  // ......h?
                /* 01B0 */  0x97, 0xDA, 0x4B, 0xD5, 0xBC, 0xBA, 0x78, 0x03,  // ..K...x.
                /* 01B8 */  0x29, 0xA8, 0x64, 0x1B, 0x01, 0xA2, 0x7A, 0x88,  // ).d...z.
                /* 01C0 */  0x53, 0xFE, 0x99, 0x8C, 0x33, 0xD9, 0x7A, 0xF4,  // S...3.z.
                /* 01C8 */  0xB4, 0xDA, 0x69, 0x38, 0x75, 0x80, 0x33, 0x3F,  // ..i8u.3?
                /* 01D0 */  0x4F, 0x13, 0x5B, 0x8B, 0x75, 0x2C, 0x49, 0x21,  // O.[.u,I!
                /* 01D8 */  0xD3, 0xA2, 0xE5, 0x93, 0xF6, 0x1E, 0x3D, 0xF4,  // ......=.
                /* 01E0 */  0x8D, 0xE7, 0x3A, 0xBE, 0x3A, 0x66, 0x40, 0xA1,  // ..:.:f@.
                /* 01E8 */  0x42, 0x7A, 0x89, 0x96, 0x90, 0x3D, 0xFE, 0xE2,  // Bz...=..
                /* 01F0 */  0xFF, 0x62, 0x89, 0x11, 0xE3, 0xE4, 0x5B, 0xD5,  // .b....[.
                /* 01F8 */  0xC8, 0x37, 0x31, 0x4F, 0x27, 0x44, 0x6C, 0xE3,  // .71O'Dl.
                /* 0200 */  0xB4, 0xF6, 0x28, 0x21, 0x1A, 0x7D, 0xAC, 0x39,  // ..(!.}.9
                /* 0208 */  0xC1, 0xCF, 0x9A, 0x83, 0x71, 0x78, 0x6E, 0x5C,  // ....qxn\
                /* 0210 */  0x26, 0xFF, 0x65, 0xCE, 0xFE, 0x07, 0x2B, 0x40,  // &.e...+@
                /* 0218 */  0xF8, 0x38, 0x25, 0x54, 0x80, 0xAB, 0xD7, 0x80,  // .8%T....
                /* 0220 */  0x99, 0xD3, 0x93, 0x71, 0x18, 0x07, 0x95, 0x01,  // ...q....
                /* 0228 */  0x37, 0x21, 0xCC, 0x24, 0x54, 0x24, 0xEA, 0x3E,  // 7!.$T$.>
                /* 0230 */  0x9D, 0xA4, 0xDC, 0xBD, 0x92, 0xAA, 0xCF, 0x56,  // .......V
                /* 0238 */  0xEA, 0x1C, 0x17, 0x6F, 0xE4, 0x01, 0x37, 0x74,  // ...o..7t
                /* 0240 */  0x50, 0x15, 0x2F, 0xDA, 0x06, 0x8E, 0x8E, 0xE2,  // P./.....
                /* 0248 */  0x2B, 0x65, 0xF3, 0x6F, 0x81, 0xA3, 0x70, 0x47,  // +e.o..pG
                /* 0250 */  0x3C, 0x65, 0xBF, 0x70, 0x42, 0xFC, 0x1D, 0x32,  // <e.pB..2
                /* 0258 */  0xBF, 0x07, 0xC6, 0x01, 0xE0, 0x43, 0xF7, 0x7A,  // .....C.z
                /* 0260 */  0x1C, 0x5C, 0xB5, 0x18, 0x43, 0x56, 0xB2, 0xEC,  // .\..CV..
                /* 0268 */  0x32, 0x4B, 0x4E, 0x2A, 0xF0, 0x0D, 0x9E, 0x81,  // 2KN*....
                /* 0270 */  0x4A, 0xFE, 0xB3, 0x3A, 0xDB, 0xA2, 0x97, 0x16,  // J..:....
                /* 0278 */  0x5B, 0x92, 0xFF, 0x20, 0x8F, 0x8E, 0x81, 0x5B,  // [.. ...[
                /* 0280 */  0x45, 0x71, 0x62, 0xE8, 0x4D, 0x81, 0xFB, 0xA8,  // Eqb.M...
                /* 0288 */  0xA4, 0x2B, 0xB2, 0x65, 0xB3, 0xAB, 0x3F, 0xC8,  // .+.e..?.
                /* 0290 */  0x78, 0xBE, 0x5C, 0xC0, 0x27, 0xFF, 0x5C, 0x5E,  // x.\.'.\^
                /* 0298 */  0xE3, 0x70, 0x6F, 0xAE, 0xAC, 0x09, 0xD6, 0xF3,  // .po.....
                /* 02A0 */  0xC4, 0x3C, 0x16, 0x0C, 0xBB, 0x1F, 0x4D, 0xA3,  // .<....M.
                /* 02A8 */  0x40, 0xD2, 0x2A, 0xC1, 0xEF, 0xB5, 0x1C, 0xE5,  // @.*.....
                /* 02B0 */  0x2D, 0xFB, 0xE5, 0x5D, 0x97, 0x6E, 0xFA, 0xD9,  // -..].n..
                /* 02B8 */  0x37, 0xAD, 0x18, 0x88, 0x1F, 0x5C, 0x1C, 0x99,  // 7....\..
                /* 02C0 */  0xC4, 0x77, 0xCD, 0x73, 0x98, 0xE7, 0x5C, 0x07,  // .w.s..\.
                /* 02C8 */  0x9C, 0x6F, 0x41, 0xA4, 0x8A, 0xD6, 0xEE, 0xA2,  // .oA.....
                /* 02D0 */  0x69, 0xB3, 0x13, 0xC4, 0xEB, 0x5E, 0x87, 0x57,  // i....^.W
                /* 02D8 */  0xBE, 0x73, 0xF7, 0x08, 0xAC, 0xF9, 0xE7, 0x98,  // .s......
                /* 02E0 */  0x2B, 0x87, 0x33, 0xEB, 0x2B, 0x86, 0xA2, 0xAE,  // +.3.+...
                /* 02E8 */  0x6E, 0xFC, 0xDE, 0xD7, 0x2B, 0xD5, 0x4D, 0x54,  // n...+.MT
                /* 02F0 */  0x6A, 0x4F, 0x6F, 0x6F, 0x51, 0xA4, 0xF1, 0x6D,  // jOooQ..m
                /* 02F8 */  0x21, 0x3D, 0xCC, 0x58, 0x57, 0xE4, 0x03, 0x84,  // !=.XW...
                /* 0300 */  0x28, 0x8F, 0x03, 0xCF, 0x97, 0x13, 0x58, 0x3D,  // (.....X=
                /* 0308 */  0x00, 0xE4, 0x61, 0x60, 0x47, 0x3C, 0x9F, 0xD4,  // ..a`G<..
                /* 0310 */  0x9B, 0x25, 0x52, 0xAF, 0xA7, 0xAF, 0x23, 0xE6,  // .%R...#.
                /* 0318 */  0x50, 0x0F, 0xD9, 0x4C, 0xEA, 0x05, 0x73, 0x8A,  // P..L..s.
                /* 0320 */  0xF5, 0x29, 0x01, 0x7A, 0x1D, 0x48, 0xA3, 0xE9,  // .).z.H..
                /* 0328 */  0x20, 0x4A, 0xD7, 0x34, 0xEB, 0xAE, 0xC8, 0xD6,  //  J.4....
                /* 0330 */  0x2F, 0x7E, 0xA2, 0x7A, 0x1E, 0xFE, 0x01, 0xAC,  // /~.z....
                /* 0338 */  0xD2, 0x10, 0x22, 0x1E, 0xB0, 0xE1, 0x38, 0xB7,  // .."...8.
                /* 0340 */  0x8F, 0x8A, 0xD7, 0x36, 0x93, 0x32, 0xCA, 0x0D,  // ...6.2..
                /* 0348 */  0x58, 0x98, 0x06, 0xDF, 0x26, 0x58, 0x5D, 0xE8,  // X...&X].
                /* 0350 */  0xF7, 0x59, 0x2F, 0xF7, 0xD7, 0xD4, 0x20, 0x5D,  // .Y/... ]
                /* 0358 */  0x96, 0x10, 0x1D, 0x9C, 0x19, 0x07, 0x43, 0x44,  // ......CD
                /* 0360 */  0x4F, 0x52, 0x93, 0xD8, 0xEC, 0x67, 0x41, 0x80,  // OR...gA.
                /* 0368 */  0xFE, 0x82, 0xEF, 0xBF, 0xCF, 0xDA, 0xEF, 0x8F,  // ........
                /* 0370 */  0xEF, 0xA9, 0x61, 0x1A, 0x06, 0xD5, 0xDE, 0xB8,  // ..a.....
                /* 0378 */  0x84, 0x3A, 0x9E, 0x1E, 0x5B, 0xC8, 0xF6, 0xC1,  // .:..[...
                /* 0380 */  0xF4, 0xC6, 0x73, 0x97, 0x65, 0xD1, 0xF9, 0x15,  // ..s.e...
                /* 0388 */  0xEE, 0x70, 0x24, 0xB2, 0x7D, 0xFE, 0xEC, 0x0E,  // .p$.}...
                /* 0390 */  0xDB, 0x17, 0x1E, 0x5D, 0x62, 0x67, 0x94, 0x2C,  // ...]bg.,
                /* 0398 */  0x13, 0x88, 0x16, 0x40, 0x39, 0xC6, 0xFC, 0x77,  // ...@9..w
                /* 03A0 */  0xE9, 0xC0, 0xCD, 0x2B, 0x42, 0x13, 0x12, 0x46,  // ...+B..F
                /* 03A8 */  0x7C, 0xCE, 0xED, 0x71, 0x24, 0xF1, 0x43, 0x5E,  // |..q$.C^
                /* 03B0 */  0xEA, 0xD0, 0x12, 0xA2, 0x43, 0xD7, 0x68, 0xDD,  // ....C.h.
                /* 03B8 */  0x87, 0x7F, 0x20, 0x48, 0xD5, 0x94, 0x57, 0x6B,  // .. H..Wk
                /* 03C0 */  0xAF, 0x87, 0xFB, 0x65, 0x25, 0x06, 0x12, 0x05,  // ...e%...
                /* 03C8 */  0xBB, 0xD7, 0x2F, 0x1D, 0xA9, 0xCA, 0x56, 0xF0,  // ../...V.
                /* 03D0 */  0xF5, 0xE4, 0xFF, 0x67, 0xD6, 0x69, 0x21, 0xD3,  // ...g.i!.
                /* 03D8 */  0xCD, 0xF3, 0xF5, 0x1B, 0x37, 0xAC, 0x73, 0xF1,  // ....7.s.
                /* 03E0 */  0xF3, 0xFE, 0xB2, 0xD7, 0xAD, 0xE3, 0xD2, 0x63,  // .......c
                /* 03E8 */  0xAD, 0xED, 0x68, 0xBE, 0xDB, 0xCD, 0xC0, 0x41,  // ..h....A
                /* 03F0 */  0x2C, 0x92, 0x64, 0x82, 0x05, 0x93, 0xA8, 0x66,  // ,.d....f
                /* 03F8 */  0x0D, 0xAB, 0x19, 0x61, 0x01, 0x30, 0x3E, 0x1B,  // ...a.0>.
                /* 0400 */  0x8C, 0x2C, 0xD7, 0x2D, 0xC2, 0x22, 0x77, 0x80,  // .,.-."w.
                /* 0408 */  0x79, 0x1F, 0x5D, 0x61, 0x7A, 0x59, 0x4A, 0xEE,  // y.]azYJ.
                /* 0410 */  0x1E, 0xCA, 0x85, 0x89, 0xA2, 0xED, 0x95, 0x76,  // .......v
                /* 0418 */  0xAC, 0x30, 0x52, 0xA9, 0xD8, 0x75, 0x0B, 0x5C,  // .0R..u.\
                /* 0420 */  0x2F, 0xED, 0xD9, 0x45, 0x37, 0x73, 0x05, 0x58,  // /..E7s.X
                /* 0428 */  0x39, 0xA1, 0xD3, 0x08, 0x64, 0x7C, 0xDC, 0x55,  // 9...d|.U
                /* 0430 */  0x7B, 0xDF, 0xF9, 0x1A, 0xFC, 0x32, 0x5E, 0x2D,  // {....2^-
                /* 0438 */  0x59, 0x08, 0xBD, 0x33, 0xB1, 0x00               // Y..3..
            }
        })
        Method (GBDV, 0, Serialized)
        {
            If ((\_SB.GGIV (0x04020013) == 0x00))
            {
                ADBG ("Load Drift DPTF DV File")
                Return (DBD1) /* \_SB_.IETM.DBD1 */
            }
            Else
            {
                ADBG ("Load Ironhide DPTF DV File")
                Return (DBD1) /* \_SB_.IETM.DBD1 */
            }
        }
    }
}

